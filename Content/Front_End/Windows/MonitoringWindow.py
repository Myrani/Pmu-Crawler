from Content.Front_End.Widgets.MonitoringCheckBox import MonitoringCheckBox
from Content.Front_End.Widgets.MonitoringScrollArea import MonitoringScrollArea
from PySide2.QtCore import Qt
from Content.Front_End.Widgets.MonitoringQLabel import MonitoringQLabel
from Content.Front_End.Widgets.MenuBar import MenuBar
from Content.Front_End.Widgets.SystemBar import SystemBar
from PySide2.QtWidgets import QCheckBox, QListWidget, QScrollArea, QScrollBar, QVBoxLayout, QWidget, QGridLayout, QGroupBox, QPushButton, QLabel


class MonitoringWindow(QWidget):

    # Window generated by a SystemBar to help the user
    def __init__(self,parent=None):
        super(MonitoringWindow,self).__init__(parent=parent)
        self.checkMonitoringCheckBoxesList = []

        self.systemBar = SystemBar(parent=self)
        self.menuBar = MenuBar(parent=self)
        self.monitoringMenu = QGroupBox(self)
        self.monitoringMenuLayout = QGridLayout()
        self.monitoringMenu.setLayout(self.monitoringMenuLayout)
        self.monitoringMenu.setGeometry(180, 35, 1100, 690)
        
        self.monitoringMenu.setStyleSheet(
            "QGroupBox {border:3px solid black;background-color:rgba(0,0,0,0.6)}")

        self.setStyleSheet("QLabel{color:white;background-color:rgba(0,0,0,0)} QPushButton{color:white;background-color:rgba(0,0,0,0)} QCheckBox{color:white;background-color:rgba(0,0,0,0)}" )
        self.initUIContent()
        self.show()

        

    def initUIContent(self):
        self.descriptionLabel = QLabel("Selection")
        self.monitoringMenuLayout.addWidget(self.descriptionLabel,0,0,1,10)

        self.setAll15QCheckBox = QCheckBox("15 Minutes",parent=self)
        self.setAll15QCheckBox.stateChanged.connect(lambda:self.onCheckAllBoxClick(15))
        self.monitoringMenuLayout.addWidget(self.setAll15QCheckBox,1,0,1,3)

        self.setAll30QCheckBox = QCheckBox("30 Minutes",parent=self)
        self.setAll30QCheckBox.stateChanged.connect(lambda:self.onCheckAllBoxClick(30))
        self.monitoringMenuLayout.addWidget(self.setAll30QCheckBox,1,3,1,3)

        self.setAll60QCheckBox = QCheckBox("60 Minutes",parent=self)
        self.setAll60QCheckBox.stateChanged.connect(lambda:self.onCheckAllBoxClick(60))
        self.monitoringMenuLayout.addWidget(self.setAll60QCheckBox,1,6,1,3)

        self.monitoringScrollArea = MonitoringScrollArea(parent=self)
        self.monitoringMenuLayout.addWidget(self.monitoringScrollArea,2,0,10,10)
        
        self.backButton = QPushButton("DÃ©marrer la surveillance des cotes")
        self.backButton.clicked.connect(self.startMonitoring)
        self.monitoringMenuLayout.addWidget(self.backButton,13,4,1,1)

        
        self.addRaces()

        #print(self.checkMonitoringCheckBoxesList)


    def addRaces(self):
        i = 0
        for race in self.nativeParentWidget().curratedRacesDone:
            object = MonitoringCheckBox(race,parent=self)
            self.checkMonitoringCheckBoxesList.append(object)
            self.monitoringScrollArea.containerLayout.addWidget(object,i,0,1,3)
            i+=1


    def onCheckAllBoxClick(self,timemark):
        for box in self.checkMonitoringCheckBoxesList:
            box.boxesDict[timemark].setChecked(not box.boxesDict[timemark].isChecked())


    def startMonitoring(self):

        self.nativeParentWidget().startRacesMonitoring()