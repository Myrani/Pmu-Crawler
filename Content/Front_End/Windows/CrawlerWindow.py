from Content.Back_End.UrlExtracter import UrlExtracterQThread
from Content.Front_End.Widgets.MenuBar import MenuBar
from Content.Front_End.Widgets.SystemBar import SystemBar
from PyQt5.QtWidgets import QListWidget, QListWidgetItem, QScrollBar, QVBoxLayout, QWidget, QGridLayout, QGroupBox, QPushButton, QLabel
from PyQt5.QtCore import QThreadPool
from Content.Back_End.UrlFinder import UrlFinderQThread

class CrawlerWindow(QWidget):

    # Window generated by a SystemBar to help the user
    def __init__(self,parent=None):
        super(CrawlerWindow,self).__init__(parent=parent)

        self.threadpool = QThreadPool()
        self.threadpool.setMaxThreadCount(4)

        self.systemBar = SystemBar(parent=self)
        self.menuBar = MenuBar(parent=self)
        self.monitoringMenu = QGroupBox(self)
        self.monitoringMenuLayout = QGridLayout()
        self.monitoringMenu.setLayout(self.monitoringMenuLayout)
        self.monitoringMenu.setGeometry(180, 35, 1100, 690)
        
        self.monitoringMenu.setStyleSheet(
            "QGroupBox {border:3px solid black;background-color:rgba(0,0,0,0.6)}")

        self.initUIContent()
        self.show()

        self.setStyleSheet("QLabel{color:white;background-color:rgba(0,0,0,0)} QPushButton{color:white;background-color:rgba(0,0,0,0)}")

    def initUIContent(self):
        
        # Descriptive Headers
        self.currentRacesFound = QLabel("Courses Trouvées :" )
        self.currentRacesFetched = QLabel("Courses Rappatriées :")

        self.monitoringMenuLayout.addWidget(self.currentRacesFound,0,0,1,1)
        self.monitoringMenuLayout.addWidget(self.currentRacesFetched,0,1,1,1)

        # Information Display

        self.currentRacesFoundDisplay = QListWidget(self)
        self.currentRacesFoundDisplayScrollBar = QScrollBar(self)
        self.currentRacesFoundDisplay.setStyleSheet("::item{background: rbga(0,0,0,0);color: white;}")
        self.currentRacesFoundDisplay.setVerticalScrollBar(self.currentRacesFoundDisplayScrollBar)
    

        self.monitoringMenuLayout.addWidget(self.currentRacesFoundDisplay,1,0,9,1)

        self.currentRacesFetchedDisplay = QListWidget(self)
        self.currentRacesFetchedDisplayScrollBar = QScrollBar(self)
        self.currentRacesFetchedDisplay.setStyleSheet("::item{background: rbga(0,0,0,0);color: white;}")
        self.currentRacesFetchedDisplay.setVerticalScrollBar(self.currentRacesFetchedDisplayScrollBar)

        self.monitoringMenuLayout.addWidget(self.currentRacesFetchedDisplay,1,1,9,1)
        
        self.finderButton = QPushButton("Lancer la recherche des courses possibles")
        self.finderButton.clicked.connect(
           lambda: self.startCrawlingFinder())
        self.monitoringMenuLayout.addWidget(self.finderButton,10,0,1,1)

        self.recupButton = QPushButton("Lancer la récupération des courses recherchées")
        self.recupButton.clicked.connect(
           lambda: self.startCrawlingExtracter())
        self.monitoringMenuLayout.addWidget(self.recupButton,10,1,1,1)

        for link in self.nativeParentWidget().racesLinks:
            self.currentRacesFoundDisplay.addItem(QListWidgetItem(link))

        for link in self.nativeParentWidget().racesDone:
            self.currentRacesFetchedDisplay.addItem(QListWidgetItem(link))

    def startCrawlingFinder(self):
        self.worker = UrlFinderQThread(parent=self)
        self.worker.signals.finished.connect(self.loadRacesLinks)
        self.threadpool.start(self.worker.run)

    def startCrawlingExtracter(self):
        for link in self.nativeParentWidget().racesLinks[0:6]:
            self.worker = UrlExtracterQThread(link,parent=self)
            self.worker.signals.finished.connect(self.loadRaceResults)
            self.threadpool.start(self.worker.run)

    def loadRacesLinks(self,data):
        self.nativeParentWidget().racesLinks = data
        self.nativeParentWidget().startCrawlerWindow()

    def loadRaceResults(self,data):
        self.nativeParentWidget().racesDone.append(str(data))
        self.nativeParentWidget().startCrawlerWindow()